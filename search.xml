<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[锄禾]]></title>
    <url>%2F2017%2F09%2F12%2F%E9%94%84%E7%A6%BE%2F</url>
    <content type="text"><![CDATA[锄禾日当午,汗滴禾下土。谁知盘中餐，粒粒皆辛苦。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>诗词</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github+Hexo搭建个人博客]]></title>
    <url>%2F2017%2F09%2F12%2FHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[名词定义 Hex0 Node.js Categories Tags Github+Hexo搭建个人博客Github是目前最火热的代码管理系统，除作为代码托管平台使用外，它还包含了一个创建个人静态博客功能，支持Markdown格式和Html格式文件。本文将在Windows平台下从注册github账号开始介绍利用github搭建个人博客的完整流程。 准备工作 能够上网的PC一台。 邮箱账号一个。 Git for windows Node.js 博客模版-Hexo 博客主题-NextTheme 搭建流程1.注册账号 如果已经有了github账号，可以跳过这一步。 前往Github官网注册一个账号。注意账号名的书写，后面将作为默认博客域名的一部分使用，例如我的博客地址：https://yuanxiudong.github.io/ 其中yuanxiudong就是我的账号名，邮箱填写准备好的邮箱账号（后续可以修改）。如果忘记了密码可以通过这个邮箱进行重置密码。注册成功后会收到激活邮件，激活账号并登陆，准备进行下一步：创建Repository。 注意： Github可能因为防火墙的原因造成访问不稳定或速度慢，可以使用国内的一些git服务，比较出名的如：码云,也同样支持个人博客主页功能，整个流程类似。 2.创建Repository创建Repository故名思议就是创建一个仓库，也就是代码仓库。一个博客的全部代码其实就是一套Html代码仓库。所以说任何一个仓库只要包含了一个index.html或者Readme.md文件，在开启page功能服务后都是可以通过 ‘https://账号名.github.io/仓库名称‘ 进行访问的。如果创建的是一个名称和github账号名称相同这样的特殊的Repository，就可以直接使用‘https://账号名.github.io/‘进行访问。个人博客就是利用上面的原理，创建一个和个人账号名称一样的Repository地址，就形成了个人博客主页，例如：https://yuanxiudong.github.io/ 。当然也可以放置在二级目录下。 3.配置GitHub在Repository的Setting中启用github page功能. 注意：是Repository的Settings而非用户的Settings 打开Repository的Settings界面向下滚动界面，找到GitHubPages选项，然后选择好代码分支，点击Save按钮，就会看到Pages的Site地址，如果Repository已经包含了一个主Readme文件，访问这个地址就能够看到内容。启用pages功能以后，还可以选择一个主题或者绑定一个专属域名。这里选择的主题因为是官方利用Jekyll主题模版创建的，无法修改与配置，因此不做过多介绍，后续内容将说明如何使用Hexo主题模版创建一个博客主题。 4.搭建Hexo环境Hexo是一套博客模版工具，能够根据用户配置生成不同的展示样式。Hexo基于Node.js所以需要先安装Node.js。安装过程比较简单，下载按照包以后直接点击安装即可。剩下的就是安装Hexo的环境，接下来具体说明每个步骤： 启动gitbash.在本地指定的文件夹下右键鼠标—&gt;Git Bash Here就可以启动Git的命令行工具窗口，接下来所有的操作都在这个命令行窗口中进行。 只有安装了Git客户端工具才会有这个右键菜单。 安装Hexo.在Git Bash窗口中使用npm按照Hexo，命令: 1npm install -g hexo 初始化Hexo.安装完毕后，继续执行init命令初始化Hexo，命令： 1hexo init 执行完毕初始化命令之后就可以看到hexo的目录结构了： node_modules : 模块组件文件夹，无需关注。 scaffolds : 模版文件夹，在每次创建文章时，根据指定的模板初始化文章文件。 source : 资源文件夹。除 posts 文件夹之外，开头命名为 (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 themes : 主题目录，下载的主题都放在这个目录里面。Hexo会根据指定的主题来生成静态页面。 _config.yml : 网址的配置信息，大部分完整参数的配置都在这个文件中。 package.json : 应用信息，一些依赖的应用组件，录入makedown等。 直接输入init命令会将当前目录作为hexo根目录，也可以跟上一个目录，则这个目录就会成为hexo根目录，示例：hexo init blog . 生成静态文件，命令： 1hexo generate (hexo g) 命令执行成功后会看到目录中新增了一个public的目录，这里就是博客的静态页面了。 启动Hexo本地服务器进行预览调试，命令： 1hexo server 命令执行成功后，控制台会提示访问http://localhost:4000，在浏览器中访问这个地址就可以看到一个最原始的博客界面了。很多电脑上4000端口可能被占用，造成在浏览器中浏览http://localhost:4000会发现什么都没有，为了避免这种情况，可以在启动本地服务器的时候修改一下端口，避免端口占用。命令： 12//5500端口可以换成任何未使用的端口，这里仅做示例hexo server -p 5500 启动后访问：http://localhost:5500你可以看到博客首页了。至此，Hexod的环境搭建流程全部结束。 5.部署到Github将这些页面部署到Github有两种方式： 直接将Public中的所有文件放到前面创建的Repository根目录下，也就是将生成全部的全部静态文件放到Github上进行托管. 利用Hexo的部署功能进行自动部署。打开hexo初始化目录中的_config.yml文件（使用文本编辑器打开，推荐NotePad++）,我们将这个文件称之为网站配置，后续说到网站配置文件指的就是这个文件。在文件的最后找到deploy选项按照如下格式进行修改：1234deploy: type: git repo: https://github.com/yuanxiudong/yuanxiudong.github.io.git branch: master repo填写自己的repository地址，这里填写我自己的地址作为示例展示。 type和branch保持一致即可。完成上面配置之后，在完成生成静态文件命令以后执行命令： 1Hexo deploy(hexo d) 部署完成以后就可以通过 ‘https://账号名.github.io/仓库名称‘在外网进行访问了，以我个人的博客为例 https://yuanxiudong.github.io/ 5.NextTheme主题介绍]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Hexo</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F09%2F12%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
